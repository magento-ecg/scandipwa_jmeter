<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ScandiPWA" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="base_host" elementType="Argument">
            <stringProp name="Argument.name">base_host</stringProp>
            <stringProp name="Argument.value">www.mydomain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="base_locale" elementType="Argument">
            <stringProp name="Argument.name">base_locale</stringProp>
            <stringProp name="Argument.value">/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_checkout" elementType="Argument">
            <stringProp name="Argument.name">guest_checkout</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lang_code" elementType="Argument">
            <stringProp name="Argument.name">lang_code</stringProp>
            <stringProp name="Argument.value">uk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currency" elementType="Argument">
            <stringProp name="Argument.name">currency</stringProp>
            <stringProp name="Argument.value">GBP</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="language" elementType="Argument">
            <stringProp name="Argument.name">language</stringProp>
            <stringProp name="Argument.value">en-US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_prefix" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_prefix</stringProp>
            <stringProp name="Argument.value">Mrs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_firstname" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_firstname</stringProp>
            <stringProp name="Argument.value">Registered</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_lastname" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_lastname</stringProp>
            <stringProp name="Argument.value">Loadtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_email" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_email</stringProp>
            <stringProp name="Argument.value">registeredloadtest@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_password" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_password</stringProp>
            <stringProp name="Argument.value">!1Registered</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_addressid" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_addressid</stringProp>
            <stringProp name="Argument.value">1936</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_countryid" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_countryid</stringProp>
            <stringProp name="Argument.value">US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_customerid" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_customerid</stringProp>
            <stringProp name="Argument.value">661129</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_telephone" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_telephone</stringProp>
            <stringProp name="Argument.value">2332332432</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_postcode" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_postcode</stringProp>
            <stringProp name="Argument.value">90210</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_city" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_city</stringProp>
            <stringProp name="Argument.value">Culver City</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_street_line1" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_street_line1</stringProp>
            <stringProp name="Argument.value">Jefferson blwd 2010</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_street_line2" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_street_line2</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_cc_no" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_cc_no</stringProp>
            <stringProp name="Argument.value">2222400070000005</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_cc_expmo" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_cc_expmo</stringProp>
            <stringProp name="Argument.value">03</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_cc_expyr" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_cc_expyr</stringProp>
            <stringProp name="Argument.value">2030</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_cc_cvc" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_cc_cvc</stringProp>
            <stringProp name="Argument.value">737</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_cc_holdername" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_cc_holdername</stringProp>
            <stringProp name="Argument.value">R. Loadtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="registered_customer_cc_type" elementType="Argument">
            <stringProp name="Argument.name">registered_customer_cc_type</stringProp>
            <stringProp name="Argument.value">MC</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_prefix" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_prefix</stringProp>
            <stringProp name="Argument.value">Mr</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_firstname" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_firstname</stringProp>
            <stringProp name="Argument.value">Guest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_lastname" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_lastname</stringProp>
            <stringProp name="Argument.value">Loadtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_email" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_email</stringProp>
            <stringProp name="Argument.value">guestloadtest@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_password" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_password</stringProp>
            <stringProp name="Argument.value">!1Registered</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_countryid" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_countryid</stringProp>
            <stringProp name="Argument.value">GB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_telephone" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_telephone</stringProp>
            <stringProp name="Argument.value">2332332324</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_postcode" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_postcode</stringProp>
            <stringProp name="Argument.value">90211</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_city" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_city</stringProp>
            <stringProp name="Argument.value">Culver City</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_street_line1" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_street_line1</stringProp>
            <stringProp name="Argument.value">20100 Jefferson blwd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_cc_no" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_cc_no</stringProp>
            <stringProp name="Argument.value">2222400070000005</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_cc_expmo" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_cc_expmo</stringProp>
            <stringProp name="Argument.value">03</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_cc_expyr" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_cc_expyr</stringProp>
            <stringProp name="Argument.value">2030</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_cc_cvc" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_cc_cvc</stringProp>
            <stringProp name="Argument.value">737</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_cc_holdername" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_cc_holdername</stringProp>
            <stringProp name="Argument.value">G. Loadtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guest_customer_cc_type" elementType="Argument">
            <stringProp name="Argument.name">guest_customer_cc_type</stringProp>
            <stringProp name="Argument.value">MC</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="AdenAnais" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1521102439">
            <stringProp name="1536462603">${__P(threads,5)}</stringProp>
            <stringProp name="1572">15</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="913100322">${__P(hold,150)}</stringProp>
            <stringProp name="-1360879467">${__P(shutdown,60)}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Homepage" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetHomePage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetHomePageStatusCodeNot5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1642953344">/[5]0[0-9]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Search" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <stringProp name="ThroughputController.percentThroughput">${__P(searchExecPercentage,30.0)}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSearchPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="search_query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${search_keyword}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">search_query</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">search/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetSearchStatusCodeNot5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1560476690">/50[0-9]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ExtractParentSku" enabled="true">
              <stringProp name="HtmlExtractor.refname">parent_sku</stringProp>
              <stringProp name="HtmlExtractor.expr">strong[role=sku]</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">parent_sku_error</stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sku</stringProp>
              <stringProp name="RegexExtractor.regex">sku&amp;#34;:&amp;#34;(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ProductListPage" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Plp_GetPlp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${category_url}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpStatusCodeNot5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1560476690">/50[0-9]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Plp_GetPlpGraphQl_CategoryResolver" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="url_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url_1</stringProp>
                  <stringProp name="Argument.value">%22${category_url}%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">4102055356</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">UrlRewrites_1666115919598</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpCatId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cat_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.urlResolver.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Plp_GetPlpGraphQlFilter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filter_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">filter_1</stringProp>
                  <stringProp name="Argument.value">{&quot;price&quot;:{},&quot;category_id&quot;:{&quot;eq&quot;:${cat_id}},&quot;customer_group_id&quot;:{&quot;eq&quot;:&quot;0&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">1464631677</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">ProductListInfo_1666115919598</stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Content-Currency</stringProp>
                  <stringProp name="Header.value">USD</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Plp_GetPlpGraphQlFilter2" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filter_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">filter_1</stringProp>
                  <stringProp name="Argument.value">{&quot;price&quot;:{},&quot;category_id&quot;:{&quot;eq&quot;:${cat_id}},&quot;customer_group_id&quot;:{&quot;eq&quot;:&quot;0&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">4276576675</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
                <elementProp name="pageSize_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pageSize_1</stringProp>
                </elementProp>
                <elementProp name="currentPage_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">currentPage_1</stringProp>
                </elementProp>
                <elementProp name="sort_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%7B%22position%22%3A%22ASC%22%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sort_1</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">ProductList_1666115919598</stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Content-Currency</stringProp>
                  <stringProp name="Header.value">USD</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Plp_GetPlpGraphQl_PlpMenu" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="identifier_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">identifier_1</stringProp>
                  <stringProp name="Argument.value">%22main-menu%22 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">2820104472</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">UrlRewrites_1666115919598</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Plp_GetPlpGraphQl_PlpFooterLinks" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="identifiers_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">identifiers_1</stringProp>
                  <stringProp name="Argument.value">[%22footer_links_pwa%22]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">2832062463</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">UrlRewrites_1666115919598</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Plp_GetPlpGraphQlCategory" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">id_1</stringProp>
                  <stringProp name="Argument.value">${cat_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2263075323</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">Category_1666115919598</stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Content-Currency</stringProp>
                  <stringProp name="Header.value">USD</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ProductDetailPage" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pdp_GetPdpPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${product_url}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpStatusCodeNot5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1560476690">/50[0-9]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pdp__GetPlpGraphQl_ProductResolver" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="url_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url_1</stringProp>
                  <stringProp name="Argument.value">%22${product_url}%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">4102055356</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">UrlRewrites_1666115919598</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPdpProdId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">prod_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.urlResolver.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPdpSKU" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">prod_sku</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.urlResolver.sku</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pdp_GetPdpGraphQl_PdpMenu" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="identifier_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">identifier_1</stringProp>
                  <stringProp name="Argument.value">%22main-menu%22 </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">2820104472</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">UrlRewrites_1666115919598</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pdp_GetPlpGraphQl_PdpFooterLinks" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="identifiers_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">identifiers_1</stringProp>
                  <stringProp name="Argument.value">[%22footer_links_pwa%22]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">2832062463</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">UrlRewrites_1666115919598</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pdp_GetPlpGraphQlProduct" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filter_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">filter_1</stringProp>
                  <stringProp name="Argument.value">{&quot;sku&quot;:{&quot;eq&quot;:&quot;${prod_sku}&quot;},&quot;customer_group_id&quot;:{&quot;eq&quot;:&quot;0&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_currency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_currency</stringProp>
                  <stringProp name="Argument.value">%22%22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3533559458</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hash</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPdpAddToCartProdId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">prod_add_to_cart_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].variants[0].product.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPdpAddToCartProdsSKU" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">prod_add_to_cart_sku</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].variants[0].product.sku</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json </stringProp>
                </elementProp>
                <elementProp name="Store" elementType="Header">
                  <stringProp name="Header.name">Application-Model</stringProp>
                  <stringProp name="Header.value">Category_1666115919598</stringProp>
                </elementProp>
                <elementProp name="Content-Currency" elementType="Header">
                  <stringProp name="Header.name">Content-Currency</stringProp>
                  <stringProp name="Header.value">USD</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="998107529">/[4-5].*</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractPlpFirstItemUrl" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pdp_url</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.products.items[0].url_key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Checkout" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <stringProp name="ThroughputController.percentThroughput">${__P(cartExecPercentage,40.0)}</stringProp>
        </ThroughputController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AddToCart" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddToCart_PostGraphQl_CreateEmptyCartGuest" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation{createEmptyCart}&quot;,&quot;variables&quot;:{}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
              </CookieManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="998107529">/[4-5].*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">5</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertPostGraphQlCreateEmptyCartStatusCodeEquals200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractEmptyCartId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">cart_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.createEmptyCart</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddToCart_PostGraphQl_AddToGuestCart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation($cartItem_1:CartItemInput!,$guestCartId_1:String,$guestCartId_2:String,$guestCartId_3:String,$guestCartId_4:String,$cart_id_1:String!,$cart_id_2:String!){saveCartItem(cartItem:$cartItem_1,guestCartId:$guestCartId_1){cartData:getCartForCustomer(guestCartId:$guestCartId_2){subtotal,subtotal_incl_tax,items_qty,tax_amount,grand_total,discount_amount,quote_currency_code,subtotal_with_discount,coupon_code,shipping_amount,shipping_incl_tax,shipping_tax_amount,is_virtual,applied_rule_ids,shipping_amount,shipping_incl_tax,shipping_tax_amount,shipping_method,items{qty,sku,price,item_id,row_total,row_total_incl_tax,tax_amount,tax_percent,discount_amount,discount_percent,customizable_options{id,label,is_required,values{id,label,value,price{value,units,type}},sort_order},downloadable_links{id,label},bundle_options{id,label,type,values{id,label,quantity,price}},product{id,sku,name,type_id,stock_status,stock_item{in_stock,min_sale_qty,max_sale_qty,qty_increments},attribute_set_name,price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},image{path,url},thumbnail{path,url},small_image{path,url},short_description{html},price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity},attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},short_name,url,... on ConfigurableProduct{configurable_options{attribute_code,values{value_index}},variants:variants{product{id,sku,name,type_id,stock_status,stock_item{in_stock,min_sale_qty,max_sale_qty,qty_increments},attribute_set_name,price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},image{path,url},thumbnail{path,url},small_image{path,url},short_description{html},price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity},attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},meta_title,meta_keyword,canonical_url,meta_description,description{html},media_gallery_entries{id,file,label,position,disabled,media_type,types,video_content{media_type,video_description,video_metadata,video_provider,video_title,video_url},thumbnail{url},base{url},large{url}},... on SimpleProduct{price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity}},url,product_seo_name,categories{id,name,url,breadcrumbs{category_id,category_name,category_level,category_url,category_is_active}},price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},productKits{is_smart,kit_id,kit_title,kit_label,price_pattern,items{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price,variations{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price}}},amasty_banners{alt,image_url,link,type}}},related_styles{sku,url,image,label,stock_status}},meta_title,meta_keyword,canonical_url,meta_description,description{html},media_gallery_entries{id,file,label,position,disabled,media_type,types,video_content{media_type,video_description,video_metadata,video_provider,video_title,video_url},thumbnail{url},base{url},large{url}},... on SimpleProduct{price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity}},categories{id,name,url,breadcrumbs{category_id,category_name,category_level,category_url,category_is_active}},... on VirtualProduct{price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity}},original_sku,parent{url,id,is_sizable},product_seo_name,attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},categories{id,name,url,breadcrumbs{category_id,category_name,category_level,category_url,category_is_active}},price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},productKits{is_smart,kit_id,kit_title,kit_label,price_pattern,items{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price,variations{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price}}},... on GiftCardProduct{giftcard_amounts{value_id,value},allow_open_amount,open_amount_min,open_amount_max,lifetime,is_redeemable,allow_message,message_max_length},amasty_banners{alt,image_url,link,type}},is_kit_product},applied_taxes{rates{percent,title}},entity_id,fee_items(cart_id:$cart_id_1){entity_id,name,frontend_type,description,options{entity_id,price,price_type,default,label}},applied_fee_options(cart_id:$cart_id_2){total_records,items{fee_id,option_id,fee_amount,base_fee_amount,tax_amount,base_tax_amount,label}},gift_message{to,from,message},base_grand_total,base_currency_code,applied_gift_cards(guestCartId:$guestCartId_3){code,expiration_date,current_balance{value,currency},applied_balance{value,currency}},discount_breakdowns(guestCartId:$guestCartId_4){discount_breakdowns_enabled,discounts{rule_amount,rule_name}}}}}&quot;,&quot;variables&quot;:{&quot;cartItem_1&quot;:{&quot;sku&quot;:&quot;${prod_add_to_cart_sku}&quot;,&quot;product_type&quot;:&quot;simple&quot;,&quot;quantity&quot;:1,&quot;product_option&quot;:{&quot;extension_attributes&quot;:{}}},&quot;guestCartId_1&quot;:&quot;${cart_id}&quot;,&quot;guestCartId_2&quot;:&quot;${cart_id}&quot;,&quot;guestCartId_3&quot;:&quot;${cart_id}&quot;,&quot;guestCartId_4&quot;:&quot;${cart_id}&quot;,&quot;cart_id_1&quot;:&quot;${cart_id}&quot;,&quot;cart_id_2&quot;:&quot;${cart_id}&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="998107529">/[4-5].*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">5</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeEquals200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddToCart_PostGraphQL_LoadCart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query($guestCartId_1:String,$guestCartId_2:String,$guestCartId_3:String,$cart_id_1:String!,$cart_id_2:String!){cartData:getCartForCustomer(guestCartId:$guestCartId_1){subtotal,subtotal_incl_tax,items_qty,tax_amount,grand_total,discount_amount,quote_currency_code,subtotal_with_discount,coupon_code,shipping_amount,shipping_incl_tax,shipping_tax_amount,is_virtual,applied_rule_ids,shipping_amount,shipping_incl_tax,shipping_tax_amount,shipping_method,items{qty,sku,price,item_id,row_total,row_total_incl_tax,tax_amount,tax_percent,discount_amount,discount_percent,customizable_options{id,label,is_required,values{id,label,value,price{value,units,type}},sort_order},downloadable_links{id,label},bundle_options{id,label,type,values{id,label,quantity,price}},product{id,sku,name,type_id,stock_status,stock_item{in_stock,min_sale_qty,max_sale_qty,qty_increments},attribute_set_name,price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},image{path,url},thumbnail{path,url},small_image{path,url},short_description{html},price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity},attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},short_name,url,... on ConfigurableProduct{configurable_options{attribute_code,values{value_index}},variants:variants{product{id,sku,name,type_id,stock_status,stock_item{in_stock,min_sale_qty,max_sale_qty,qty_increments},attribute_set_name,price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},image{path,url},thumbnail{path,url},small_image{path,url},short_description{html},price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity},attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},meta_title,meta_keyword,canonical_url,meta_description,description{html},media_gallery_entries{id,file,label,position,disabled,media_type,types,video_content{media_type,video_description,video_metadata,video_provider,video_title,video_url},thumbnail{url},base{url},large{url}},... on SimpleProduct{price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity}},url,product_seo_name,categories{id,name,url,breadcrumbs{category_id,category_name,category_level,category_url,category_is_active}},price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},productKits{is_smart,kit_id,kit_title,kit_label,price_pattern,items{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price,variations{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price}}},amasty_banners{alt,image_url,link,type}}},related_styles{sku,url,image,label,stock_status}},meta_title,meta_keyword,canonical_url,meta_description,description{html},media_gallery_entries{id,file,label,position,disabled,media_type,types,video_content{media_type,video_description,video_metadata,video_provider,video_title,video_url},thumbnail{url},base{url},large{url}},... on SimpleProduct{price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity}},categories{id,name,url,breadcrumbs{category_id,category_name,category_level,category_url,category_is_active}},... on VirtualProduct{price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity}},original_sku,parent{url,id,is_sizable},product_seo_name,attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},categories{id,name,url,breadcrumbs{category_id,category_name,category_level,category_url,category_is_active}},price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},productKits{is_smart,kit_id,kit_title,kit_label,price_pattern,items{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price,variations{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price}}},... on GiftCardProduct{giftcard_amounts{value_id,value},allow_open_amount,open_amount_min,open_amount_max,lifetime,is_redeemable,allow_message,message_max_length},amasty_banners{alt,image_url,link,type}},is_kit_product},applied_taxes{rates{percent,title}},entity_id,fee_items(cart_id:$cart_id_1){entity_id,name,frontend_type,description,options{entity_id,price,price_type,default,label}},applied_fee_options(cart_id:$cart_id_2){total_records,items{fee_id,option_id,fee_amount,base_fee_amount,tax_amount,base_tax_amount,label}},gift_message{to,from,message},base_grand_total,base_currency_code,applied_gift_cards(guestCartId:$guestCartId_2){code,expiration_date,current_balance{value,currency},applied_balance{value,currency}},discount_breakdowns(guestCartId:$guestCartId_3){discount_breakdowns_enabled,discounts{rule_amount,rule_name}}}}&quot;,&quot;variables&quot;:{&quot;guestCartId_1&quot;:&quot;${cart_id}&quot;,&quot;guestCartId_2&quot;:&quot;${cart_id}&quot;,&quot;guestCartId_3&quot;:&quot;${cart_id}&quot;,&quot;cart_id_1&quot;:&quot;${cart_id}&quot;,&quot;cart_id_2&quot;:&quot;${cart_id}&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetNonemptyCheckoutCartNot5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1560476690">/50[0-9]</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cart" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cart_GetNonemptyCheckoutCartGuest" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">checkout/cart</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetNonemptyCheckoutCartNot5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1560476690">/50[0-9]</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cart_GetGraphQL_GetPayments" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="hash" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2311231687</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">hash</stringProp>
                  </elementProp>
                  <elementProp name="guestCartId_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">%22${cart_id}%22</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">guestCartId_1</stringProp>
                  </elementProp>
                  <elementProp name="_currency" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">%22%22</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_currency</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="998107529">/[4-5].*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">5</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeEquals200" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cart_PostGraphQL_GetCart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;query($guestCartId_1:String,$guestCartId_2:String,$guestCartId_3:String,$cart_id_1:String!,$cart_id_2:String!){cartData:getCartForCustomer(guestCartId:$guestCartId_1){subtotal,subtotal_incl_tax,items_qty,tax_amount,grand_total,discount_amount,quote_currency_code,subtotal_with_discount,coupon_code,shipping_amount,shipping_incl_tax,shipping_tax_amount,is_virtual,applied_rule_ids,shipping_amount,shipping_incl_tax,shipping_tax_amount,shipping_method,items{qty,sku,price,item_id,row_total,row_total_incl_tax,tax_amount,tax_percent,discount_amount,discount_percent,customizable_options{id,label,is_required,values{id,label,value,price{value,units,type}},sort_order},downloadable_links{id,label},bundle_options{id,label,type,values{id,label,quantity,price}},product{id,sku,name,type_id,stock_status,stock_item{in_stock,min_sale_qty,max_sale_qty,qty_increments},attribute_set_name,price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},image{path,url},thumbnail{path,url},small_image{path,url},short_description{html},price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity},attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},short_name,url,... on ConfigurableProduct{configurable_options{attribute_code,values{value_index}},variants:variants{product{id,sku,name,type_id,stock_status,stock_item{in_stock,min_sale_qty,max_sale_qty,qty_increments},attribute_set_name,price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},image{path,url},thumbnail{path,url},small_image{path,url},short_description{html},price_tiers{discount{amount_off,percent_off},final_price{currency,value},quantity},attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},product_seo_name,categories{id,name,url,breadcrumbs{category_id,category_name,category_level,category_url,category_is_active}},price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},productKits{is_smart,kit_id,kit_title,kit_label,price_pattern,items{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price,variations{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price}}}}}},parent{url,id,is_sizable},product_seo_name,attributes:s_attributes{attribute_id,attribute_value,attribute_code,attribute_type,attribute_label,attribute_group_id,attribute_group_code,attribute_group_name,attribute_options{label,value,swatch_data{type,value},admin_label}},categories{id,name,url,breadcrumbs{category_id,category_name,category_level,category_url,category_is_active}},price_range{minimum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}},maximum_price{discount{amount_off,percent_off},final_price{currency,value},final_price_excl_tax{currency,value},regular_price{currency,value},regular_price_excl_tax{currency,value},default_price{currency,value},default_final_price{currency,value},default_final_price_excl_tax{currency,value}}},productKits{is_smart,kit_id,kit_title,kit_label,price_pattern,items{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price,variations{item_id,product_id,product_sku,discount_type,discount_amount,regular_price,is_optional,position,qty,final_price,kit_price}}},... on GiftCardProduct{giftcard_amounts{value_id,value},allow_open_amount,open_amount_min,open_amount_max,lifetime,is_redeemable,allow_message,message_max_length}},is_kit_product},applied_taxes{rates{percent,title}},entity_id,fee_items(cart_id:$cart_id_1){entity_id,name,frontend_type,description,options{entity_id,price,price_type,default,label}},applied_fee_options(cart_id:$cart_id_2){total_records,items{fee_id,option_id,fee_amount,base_fee_amount,tax_amount,base_tax_amount,label}},gift_message{to,from,message},base_grand_total,base_currency_code,applied_gift_cards(guestCartId:$guestCartId_2){code,expiration_date,current_balance{value,currency},applied_balance{value,currency}},discount_breakdowns(guestCartId:$guestCartId_3){discount_breakdowns_enabled,discounts{rule_amount,rule_name}}}}&quot;,&quot;variables&quot;:{&quot;guestCartId_1&quot;:&quot;${cart_id}&quot;,&quot;guestCartId_2&quot;:&quot;${cart_id}&quot;,&quot;guestCartId_3&quot;:&quot;${cart_id}&quot;,&quot;cart_id_1&quot;:&quot;${cart_id}&quot;,&quot;cart_id_2&quot;:&quot;${cart_id}&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetNonemptyCheckoutCartNot5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1560476690">/50[0-9]</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Checkout" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout_GetCheckoutOnePageGuest" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">checkout/shipping</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetNonemptyCheckoutCartNot5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1560476690">/50[0-9]</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout_GuestIsEmailAvailable" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="hash" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">583448750</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">hash</stringProp>
                  </elementProp>
                  <elementProp name="email_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">%22${guest_customer_email}%22</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">email_1</stringProp>
                  </elementProp>
                  <elementProp name="_currency" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">%22%22</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_currency</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="998107529">/[4-5].*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">5</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeEquals200" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout_PostMagentoGuestEstimateShippingMethods" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation($address_1:EstimateShippingCostsAddress!,$guestCartId_1:String!){estimateShippingCosts(address:$address_1,guestCartId:$guestCartId_1){amount,available,base_amount,method_code,carrier_code,method_title,carrier_title,error_message,price_excl_tax,price_incl_tax}}&quot;,&quot;variables&quot;:{&quot;address_1&quot;:{&quot;country_id&quot;:&quot;US&quot;,&quot;region_id&quot;:1,&quot;region&quot;:&quot;CA&quot;,&quot;city&quot;:&quot;${guest_customer_city}&quot;,&quot;postcode&quot;:&quot;${guest_customer_postcode}&quot;},&quot;guestCartId_1&quot;:&quot;${cart_id}&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeNot4xx5xx" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="998107529">/[4-5].*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">5</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="AssertGetPlpGraphQlStatusCodeEquals200" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="[config] HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${base_host}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${base_locale}</stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="[config] HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;88&quot;, &quot;Google Chrome&quot;;v=&quot;88&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
            </elementProp>
            <elementProp name="origin&#x9;https" elementType="Header">
              <stringProp name="Header.name">origin</stringProp>
              <stringProp name="Header.value">https://${base_host}</stringProp>
            </elementProp>
            <elementProp name="referer&#x9;https" elementType="Header">
              <stringProp name="Header.name">referer</stringProp>
              <stringProp name="Header.value">https://${base_host}</stringProp>
            </elementProp>
            <elementProp name="cache-control-no-cdn" elementType="Header">
              <stringProp name="Header.name">cache-control-no-cdn</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="[config] DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="[config] HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          <stringProp name="CookieManager.policy">best-match</stringProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="[config] HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="[config] HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list"/>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Random Product Url" enabled="true">
          <stringProp name="filename">./scandipwa/product_list.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="variableNames">product_url</stringProp>
          <boolProp name="randomOrder">true</boolProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="rewindOnTheEndOfList">true</boolProp>
          <boolProp name="independentListPerThread">false</boolProp>
        </com.blazemeter.jmeter.RandomCSVDataSetConfig>
        <hashTree/>
        <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Random Search Keyword" enabled="true">
          <stringProp name="filename">./scandipwa/search_list.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="variableNames">search_keyword</stringProp>
          <boolProp name="randomOrder">true</boolProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="rewindOnTheEndOfList">true</boolProp>
          <boolProp name="independentListPerThread">false</boolProp>
        </com.blazemeter.jmeter.RandomCSVDataSetConfig>
        <hashTree/>
        <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Random Category Url" enabled="true">
          <stringProp name="filename">./scandipwa/category_url.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="variableNames">category_url</stringProp>
          <boolProp name="randomOrder">true</boolProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="rewindOnTheEndOfList">true</boolProp>
          <boolProp name="independentListPerThread">false</boolProp>
        </com.blazemeter.jmeter.RandomCSVDataSetConfig>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/alex.karanda/Documents/ProjectSpecs/AdenAndAnais/results/repo30_2ts.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/alex.karanda/Documents/Company/LoadTest/repo20_2tt</stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">repo5_2ts</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
